Updated list of ar2gems-python functions
The syntax: write one of the functions shown in the 1ist column after the prefix 'sgems.'. Examples in the descriptions (2nd column)
For more details of what the functions do, check the file python_commands.h


execute                         "Return the number of arguments received by the process."get_property                    "Return a vector with property values if informed.USAGE: [value_vector] = sgems.get_property(\"grid_name\",\"property_name\"). Use _X_ or _Y_ or _Z_ for x,y,z."get_X                           "Return a vector with X values.USAGE: [value_list] = sgems.get_X(\"grid_name\")."get_Y                           "Return a vector with Y values.USAGE: [value_list] = sgems.get_Y(\"grid_name\")."get_Z                           "Return a vector with Z values.USAGE: [value_list] = sgems.get_Z(\"grid_name\")."get_U                           "Return a vector with U values.USAGE: [value_list] = sgems.get_U(\"grid_name\")."get_V                           "Return a vector with V values.USAGE: [value_list] = sgems.get_V(\"grid_name\")."get_W                           "Return a vector with W values.USAGE: [value_list] = sgems.get_W(\"grid_name\")."set_UVW_from_properties         "Set UVW coordinates on grid from fully-informed grid properties.USAGE: sgems.set_UVW_from_properties(\"grid_name\",\"prop1\",\"prop2\",\"prop3\")."set_UVW                         "Set UVW coordinates on grid from fully-informed list.USAGE: sgems.set_UVW_from_properties(\"grid_name\",\"prop1\",\"prop2\",\"prop3\")."set_property                    "Change or create a property of a grid.USAGE: sgems.set_property(\"grid_name\",\"property_name\",vector of values populated in nodeid order)."get_cell_property               "Return a vector with property values at specific nodeids, if informed.USAGE: [value_vector] = sgems.get_cell_property(\"grid_name\",\"property_name\",[node1,node2,node3...]). Use _X_ or _Y_ or _Z_ for x,y,z."set_cell_property               "Change or create a property of a grid at specific nodeid.USAGE: sgems.set_cell_property(\"grid_name\",\"property_name\",[node1,node2,node3...],[val1,val2,val3...])."get_dims                        "Get dimension of a regular grid.USAGE: [nx,ny,nz]=sgems.sgems_get_dims(\"grid_name\")"get_grid_size                   "Get the number of cells (nodes) of a grid.USAGE: [n_cells]=sgems.sgems_get_grid_size(\"grid_name\")"set_region                      "Import a region to a grid.USAGE: sgems.set_region(\"grid_name\",\"region_name\",[v1,v2,v3...]"get_region                      "Export a region from a grid.USAGE: [v1,v2,v3...] = sgems.get_region(\"grid_name\",\"region_name\""nan                             "Return the SGeMS value for NAN.USAGE: [nanval] = sgems.nan()"get_property_list               "Return the list of property name in a grid.USAGE: [prop_list]=sgems.get_property_list(\"grid_name\")"get_location                    "Return the x,y,z location of a grid based on the nodeid.USAGE: [x,y,z]=sgems.get_location(\"grid_name\", nodeid)."get_ijk                         "Return the i,j,k indexes of a regular grid based on the nodeid.USAGE: [i,j,k]=sgems.get_ijk(\"grid_name\", nodeid)."get_nodeid                      "Return the nodeid from a x,y,z location.USAGE: [nodeid]=sgems.get_nodeid(\"grid_name\", x,y,z)."get_closest_nodeid              "Return the closest nodeid from a x,y,z location.USAGE: [nodeid]=sgems.get_closest_nodeid(\"grid_name\", x,y,z)."get_nodeid_from_ijk             "Return the nodeid from a i,j,k indexes for a regular grid.USAGE: [nodeid]=sgems.get_nodeid_from_ijk(\"grid_name\", i,j,k)."set_categorical_property_int    "Set a categorical property from a list of integer.USAGE: [void]=sgems.set_categorical_property_int(\"grid_name\", property_name, property_values)"set_categorical_property_alpha  "Set a categorical property from a list of alphanumeric entries (string).USAGE: [void]=sgems.set_categorical_property_int(\"grid_name\", property_name, strings)"get_categorical_definition      "Get the categorical definition from a categorical property.USAGE [cat1,cat2, ...]=sgems.get_categorical_definition(\"grid_name\", categorical_property_name)"get_properties_in_group         "Get the name of the member property for a group.USAGE: [list of strings]=sgems.sgems_get_property_in_group(\"grid_name\",\"group_name\")"new_point_set                   "Create a new point set or append to existing point set, given a set of x,y,z coordinates.USAGE: sgems.sgems_new_point_set(\"point_set_name\",x,y,z)"quantile                        "Get the inverse cdf values (quantiles) from a list of probabilities.USAGE: [quantile values list] = sgems.quantile(\"dist_name\",[.1, .2, .5,...])"cdf                             "Get the cdf values (probability below) from a list of quantiles.USAGE: [probability_below values list (doubles between 0 and 1)] = sgems.cdf(\"dist_name\",[value_1, value_2, value_3,...])"pdf                             "Get the pdf values (probability) from a list of quantiles.USAGE: [probability values list (doubles between 0 and 1)] = sgems.pdf(\"dist_name\",[value_1, value_2, value_3,...])"set_connections                 "Set connections between the nodeids of two equal-sized vectors. USAGE: [void]=sgems.set_connections(list_of_N_nodeid_left, list_of_N_nodeid_right)"delete_connections              "Delete connections between the nodeids of two equal-sized vectors"get_all_connections             "Get all connections between nodeids."get_node_connections            "Get connections associated to one or a tuple of nodeids (example: (1,2,5) )."reset_connections               "Delete all connections on the grid, and restore default connections using face contacts."get_neighbors                   "Get the neighbors id for a list of nodeid.USAGE: [nodeids] = sgems.get_neighbors(\"grid_name\",\"prop_name\", range1, range2, range3, azimuth, dip, rake, list_of_nodeids)"get_masked_grid_full_X          "Return a vector with X values of the cartesian grid behind a masked grid.USAGE: [value_list] = sgems.get_masked_grid_full_X(\"masked_grid_name\")."get_masked_grid_full_Y          "Return a vector with Y values of the cartesian grid behind a masked grid.USAGE: [value_list] = sgems.get_masked_grid_full_Y(\"masked_grid_name\")."get_masked_grid_full_Z          "Return a vector with the Z values of the cartesian grid behind a masked grid.USAGE: [value_list] = sgems.get_masked_grid_full_Z(\"masked_grid_name\")."get_masked_grid_mask            "Return a vector of the mask of a masked grid.USAGE: [value_list] = sgems.get_masked_grid_mask(\"masked_grid_name\")."